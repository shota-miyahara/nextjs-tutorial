{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nconst postsDirectory = path.join(process.cwd(), \"posts\");\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\"); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory); // Returns an array that looks like this:\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   },\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/miyashota/react/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","processedContent","use","content","contentHtml","toString"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACpC;AACA,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAChD;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAFgD,CAIhD;;AACA,UAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,UAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CANgD,CAQhD;;AACA,UAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CATgD,CAWhD;;AACA;AACCH,MAAAA;AADD,OAEIK,YAAY,CAACC,IAFjB;AAIA,GAhBoB,CAArB,CAHoC,CAoBpC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACpB,aAAO,CAAP;AACA,KAFD,MAEO;AACN,aAAO,CAAC,CAAR;AACA;AACD,GANM,CAAP;AAOA;AAED,OAAO,SAASC,aAAT,GAAyB;AAC/B,QAAMhB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB,CAD+B,CAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOK,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAClC,WAAO;AACNa,MAAAA,MAAM,EAAE;AACPZ,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADG;AADF,KAAP;AAKA,GANM,CAAP;AAOA;AAED,OAAO,eAAeY,WAAf,CAA2Bb,EAA3B,EAA+B;AACrC,QAAME,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA2B,GAAEU,EAAG,KAAhC,CAAjB;AACA,QAAMG,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFqC,CAIrC;;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CALqC,CAOrC;;AACA,QAAMW,gBAAgB,GAAG,MAAM1B,MAAM,GACnC2B,GAD6B,CACzB1B,IADyB,EAE7BG,OAF6B,CAErBa,YAAY,CAACW,OAFQ,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAXqC,CAarC;;AACA;AACClB,IAAAA,EADD;AAECiB,IAAAA;AAFD,KAGIZ,YAAY,CAACC,IAHjB;AAKA","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\n\nconst postsDirectory = path.join(process.cwd(), \"posts\");\n\nexport function getSortedPostsData() {\n\t// Get file names under /posts\n\tconst fileNames = fs.readdirSync(postsDirectory);\n\tconst allPostsData = fileNames.map((fileName) => {\n\t\t// Remove \".md\" from file name to get id\n\t\tconst id = fileName.replace(/\\.md$/, \"\");\n\n\t\t// Read markdown file as string\n\t\tconst fullPath = path.join(postsDirectory, fileName);\n\t\tconst fileContents = fs.readFileSync(fullPath, \"utf8\");\n\n\t\t// Use gray-matter to parse the post metadata section\n\t\tconst matterResult = matter(fileContents);\n\n\t\t// Combine the data with the id\n\t\treturn {\n\t\t\tid,\n\t\t\t...matterResult.data,\n\t\t};\n\t});\n\t// Sort posts by date\n\treturn allPostsData.sort((a, b) => {\n\t\tif (a.date < b.date) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t});\n}\n\nexport function getAllPostIds() {\n\tconst fileNames = fs.readdirSync(postsDirectory);\n\t// Returns an array that looks like this:\n\t// [\n\t//   {\n\t//     params: {\n\t//       id: 'ssg-ssr'\n\t//     }\n\t//   },\n\t//   {\n\t//     params: {\n\t//       id: 'pre-rendering'\n\t//     }\n\t//   }\n\t// ]\n\treturn fileNames.map((fileName) => {\n\t\treturn {\n\t\t\tparams: {\n\t\t\t\tid: fileName.replace(/\\.md$/, \"\"),\n\t\t\t},\n\t\t};\n\t});\n}\n\nexport async function getPostData(id) {\n\tconst fullPath = path.join(postsDirectory, `${id}.md`);\n\tconst fileContents = fs.readFileSync(fullPath, \"utf8\");\n\n\t// Use gray-matter to parse the post metadata section\n\tconst matterResult = matter(fileContents);\n\n\t// Use remark to convert markdown into HTML string\n\tconst processedContent = await remark()\n\t\t.use(html)\n\t\t.process(matterResult.content);\n\tconst contentHtml = processedContent.toString();\n\n\t// Combine the data with the id and contentHtml\n\treturn {\n\t\tid,\n\t\tcontentHtml,\n\t\t...matterResult.data,\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}